{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CD6QdL756qEx"
      },
      "outputs": [],
      "source": [
        "# Importing data manipulation libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Importing visualization libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Importing preprocessing libraries\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Importing models from Sickit-Learn\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "\n",
        "# Importing metrics\n",
        "from sklearn.metrics import accuracy_score, precision_recall_fscore_support, confusion_matrix, classification_report\n",
        "\n",
        "# Importing additional tools\n",
        "from sklearn.model_selection import train_test_split, cross_val_score, KFold, GridSearchCV\n",
        "from sklearn.ensemble import BaggingClassifier, AdaBoostClassifier"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing data manipulation libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# ... (rest of your imports) ...\n",
        "\n",
        "# Assuming your data is in a CSV file named 'your_data.csv'\n",
        "df = pd.read_csv('/content/Medical_insurance (2).csv')  # Load data into a DataFrame named 'df'\n",
        "\n",
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MurrAdwNEOPz",
        "outputId": "7659af45-d809-40e3-e406-260eef5064a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2772 entries, 0 to 2771\n",
            "Data columns (total 7 columns):\n",
            " #   Column    Non-Null Count  Dtype  \n",
            "---  ------    --------------  -----  \n",
            " 0   age       2772 non-null   int64  \n",
            " 1   sex       2772 non-null   object \n",
            " 2   bmi       2772 non-null   float64\n",
            " 3   children  2772 non-null   int64  \n",
            " 4   smoker    2772 non-null   object \n",
            " 5   region    2772 non-null   object \n",
            " 6   charges   2772 non-null   float64\n",
            "dtypes: float64(2), int64(2), object(3)\n",
            "memory usage: 151.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LGBOxNqXEucy",
        "outputId": "51848886-b9f9-45fe-f949-7b9abbeaba1e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2772, 7)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# are there any duplicated rows?\n",
        "df.duplicated().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "is_FwzIsE1JR",
        "outputId": "31a0227b-d528-4ef0-81fc-ac86d8053680"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1435"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#are there any null values?\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "id": "YwEBn9fTE4gQ",
        "outputId": "efa5789f-9492-4bfd-b388-611284a87cf3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "age         0\n",
              "sex         0\n",
              "bmi         0\n",
              "children    0\n",
              "smoker      0\n",
              "region      0\n",
              "charges     0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sex</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bmi</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>children</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoker</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>charges</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# create countplot\n",
        "sns.set_style('whitegrid')\n",
        "\n",
        "# Ensure df is defined and contains the 'Outcome' column\n",
        "# df = pd.read_csv('your_data.csv') # Example: Read data from a CSV file - replace 'your_data.csv'\n",
        "\n",
        "ax = sns.countplot(x='children', data=df, palette=['green', 'black']) # Use df instead of df_new\n",
        "for p in ax.patches:\n",
        "    ax.annotate(format(p.get_height()),\n",
        "                (p.get_x() + p.get_width() / 2., p.get_height()),\n",
        "                ha = 'center', va = 'center',\n",
        "                xytext = (0, 10),\n",
        "                textcoords = 'offset points')\n",
        "\n",
        "ax.set_xlabel('Outcome', fontsize=12)\n",
        "ax.set_ylabel('Count',fontsize=12)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 633
        },
        "id": "PjAAjt84E9Iw",
        "outputId": "d6c52308-1629-49fc-adf4-b4f755132e56"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-5ae3feac7c28>:7: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.countplot(x='children', data=df, palette=['green', 'black']) # Use df instead of df_new\n",
            "<ipython-input-9-5ae3feac7c28>:7: UserWarning: \n",
            "The palette list has fewer values (2) than needed (6) and will cycle, which may produce an uninterpretable plot.\n",
            "  ax = sns.countplot(x='children', data=df, palette=['green', 'black']) # Use df instead of df_new\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Count')"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# 1. Load the dataset (example: replace 'your_data.csv' with your actual file)\n",
        "df = pd.read_csv('/content/Medical_insurance (2).csv')\n",
        "\n",
        "# 2. Handle missing values\n",
        "# Separate features (X) and target variable (y)\n",
        "X = df.drop('smoker', axis=1)  # Drop the target column (assuming it's named 'Outcome')\n",
        "y = df['children']  # Target column\n",
        "\n",
        "# Check for missing values in the dataset\n",
        "print(X.isnull().sum())\n",
        "\n",
        "# Impute missing numerical values with mean\n",
        "num_cols = X.select_dtypes(include=['int64', 'float64']).columns\n",
        "num_imputer = SimpleImputer(strategy='mean')\n",
        "X[num_cols] = num_imputer.fit_transform(X[num_cols])\n",
        "\n",
        "# Impute missing categorical values with the most frequent category\n",
        "cat_cols = X.select_dtypes(include=['object']).columns\n",
        "cat_imputer = SimpleImputer(strategy='most_frequent')\n",
        "X[cat_cols] = cat_imputer.fit_transform(X[cat_cols])\n",
        "\n",
        "# 3. Encoding categorical variables\n",
        "# Label Encoding for the target variable (y) if it's categorical\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y = label_encoder.fit_transform(y)\n",
        "\n",
        "# One-Hot Encoding for categorical features\n",
        "ct = ColumnTransformer(transformers=[\n",
        "    ('encoder', OneHotEncoder(drop='first'), cat_cols)\n",
        "], remainder='passthrough')\n",
        "\n",
        "X = np.array(ct.fit_transform(X))  # Convert to NumPy array\n",
        "\n",
        "# 4. Feature scaling (Standardization)\n",
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(X)\n",
        "\n",
        "# 5. Split the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# 6. Optional: Feature Selection using correlation or statistical methods (example: variance threshold)\n",
        "# from sklearn.feature_selection import VarianceThreshold\n",
        "# selector = VarianceThreshold(threshold=0.1)\n",
        "# X_train = selector.fit_transform(X_train)\n",
        "# X_test = selector.transform(X_test)\n",
        "\n",
        "# Now, X_train and y_train are ready for training a model\n",
        "# X_test and y_test are used for model evaluation\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DpiTx2L3FBh3",
        "outputId": "9facff2f-28c9-474d-f4b0-8047e57c4294"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "age         0\n",
            "sex         0\n",
            "bmi         0\n",
            "children    0\n",
            "region      0\n",
            "charges     0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Scikit-learn libraries for preprocessing and modeling\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.feature_selection import SelectKBest, f_regression  # Use f_regression for regression tasks\n",
        "\n",
        "# Optional: To visualize missing data\n",
        "import missingno as msno\n",
        "\n",
        "# Libraries for saving preprocessing objects\n",
        "import joblib\n"
      ],
      "metadata": {
        "id": "Uehc96gqFMvx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Load the Dataset\n",
        "# Replace the file path with your actual file path\n",
        "df = pd.read_csv('/content/Medical_insurance (2).csv')\n",
        "\n",
        "# Display the first few rows to verify loading\n",
        "print(\"Dataset Loaded Successfully. First 5 rows:\")\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aeSur6NwFPb4",
        "outputId": "9d0cdf69-fef9-4cb1-89f6-0557f1aed038"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset Loaded Successfully. First 5 rows:\n",
            "   age     sex     bmi  children smoker     region      charges\n",
            "0   19  female  27.900         0    yes  southwest  16884.92400\n",
            "1   18    male  33.770         1     no  southeast   1725.55230\n",
            "2   28    male  33.000         3     no  southeast   4449.46200\n",
            "3   33    male  22.705         0     no  northwest  21984.47061\n",
            "4   32    male  28.880         0     no  northwest   3866.85520\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 3. Handle Missing Values and Define Features and Target\n",
        "# Define the target variable\n",
        "target_variable = 'children'  # Replace 'target_column_name' with the actual column name in your dataset\n",
        "\n",
        "# Separate features and target\n",
        "if target_variable not in df.columns:\n",
        "    raise ValueError(f\"The dataset must contain a '{target_variable}' column as the target variable.\")\n",
        "\n",
        "X = df.drop(target_variable, axis=1)\n",
        "y = df[target_variable]\n",
        "\n",
        "print(\"\\nFeatures and Target Defined:\")\n",
        "print(f\"Features shape: {X.shape}\")\n",
        "print(f\"Target shape: {y.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G0-jSsfOFaRv",
        "outputId": "a8058e7b-447a-4519-c52a-88add438bfab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Features and Target Defined:\n",
            "Features shape: (2772, 6)\n",
            "Target shape: (2772,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 4. Identify Numerical and Categorical Columns\n",
        "numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns.tolist()\n",
        "categorical_cols = X.select_dtypes(include=['object', 'category']).columns.tolist()\n",
        "\n",
        "print(f\"\\nNumerical Columns ({len(numerical_cols)}): {numerical_cols}\")\n",
        "print(f\"Categorical Columns ({len(categorical_cols)}): {categorical_cols}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5FkgdSQHFn7y",
        "outputId": "10a08828-24a7-47ae-fe5f-a8270e51bfad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Numerical Columns (3): ['age', 'bmi', 'charges']\n",
            "Categorical Columns (3): ['sex', 'smoker', 'region']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Scikit-learn libraries for preprocessing and modeling\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.feature_selection import SelectKBest, f_regression  # Use f_regression for regression tasks\n",
        "\n",
        "# Optional: To visualize missing data\n",
        "import missingno as msno\n",
        "\n",
        "# Libraries for saving preprocessing objects\n",
        "import joblib\n",
        "\n",
        "# ... (Your existing code for loading and preparing the data) ...\n",
        "\n",
        "# 4. Identify Numerical and Categorical Columns\n",
        "numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns.tolist()\n",
        "categorical_cols = X.select_dtypes(include=['object', 'category']).columns.tolist()\n",
        "\n",
        "print(f\"\\nNumerical Columns ({len(numerical_cols)}): {numerical_cols}\")\n",
        "print(f\"Categorical Columns ({len(categorical_cols)}): {categorical_cols}\")\n",
        "\n",
        "# 5. Create Preprocessing Pipeline (Define 'preprocessor')\n",
        "# Define preprocessing steps for numerical and categorical features\n",
        "numerical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),  # or 'median'\n",
        "    ('scaler', StandardScaler()),\n",
        "])\n",
        "\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(sparse_output=False, handle_unknown='ignore')), # sparse=False for PCA\n",
        "])\n",
        "\n",
        "# Create a ColumnTransformer to apply the preprocessing to the correct columns\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numerical_transformer, numerical_cols),\n",
        "        ('cat', categorical_transformer, categorical_cols),\n",
        "    ])\n",
        "\n",
        "# 7. Feature Extraction and Selection\n",
        "# Example: PCA for Dimensionality Reduction and SelectKBest for feature selection\n",
        "feature_extraction_selection = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),  # Now 'preprocessor' is defined\n",
        "    ('pca', PCA(n_components=0.95)),  # Retain 95% of variance\n",
        "    ('selectkbest', SelectKBest(score_func=f_regression, k=10))  # Select top 10 features for regression\n",
        "])\n",
        "\n",
        "print(\"\\nFeature Extraction and Selection Pipeline Defined:\")\n",
        "print(feature_extraction_selection)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eS_Bx9KrFpxI",
        "outputId": "51e3597a-ffe6-4b03-efbc-caee51e22bfa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Numerical Columns (3): ['age', 'bmi', 'charges']\n",
            "Categorical Columns (3): ['sex', 'smoker', 'region']\n",
            "\n",
            "Feature Extraction and Selection Pipeline Defined:\n",
            "Pipeline(steps=[('preprocessor',\n",
            "                 ColumnTransformer(transformers=[('num',\n",
            "                                                  Pipeline(steps=[('imputer',\n",
            "                                                                   SimpleImputer()),\n",
            "                                                                  ('scaler',\n",
            "                                                                   StandardScaler())]),\n",
            "                                                  ['age', 'bmi', 'charges']),\n",
            "                                                 ('cat',\n",
            "                                                  Pipeline(steps=[('imputer',\n",
            "                                                                   SimpleImputer(strategy='most_frequent')),\n",
            "                                                                  ('onehot',\n",
            "                                                                   OneHotEncoder(handle_unknown='ignore',\n",
            "                                                                                 sparse_output=False))]),\n",
            "                                                  ['sex', 'smoker',\n",
            "                                                   'region'])])),\n",
            "                ('pca', PCA(n_components=0.95)),\n",
            "                ('selectkbest',\n",
            "                 SelectKBest(score_func=<function f_regression at 0x7bd76f67d5a0>))])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 9. Split the Dataset into Training and Testing Sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "print(\"\\nDataset Split:\")\n",
        "print(f\"Training Features Shape: {X_train.shape}\")\n",
        "print(f\"Testing Features Shape: {X_test.shape}\")\n",
        "print(f\"Training Target Shape: {y_train.shape}\")\n",
        "print(f\"Testing Target Shape: {y_test.shape}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YwH_kls3FyWe",
        "outputId": "54585fa3-9a04-4224-eba7-ea28c9dac32b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Dataset Split:\n",
            "Training Features Shape: (2217, 6)\n",
            "Testing Features Shape: (555, 6)\n",
            "Training Target Shape: (2217,)\n",
            "Testing Target Shape: (555,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Scikit-learn libraries for preprocessing and modeling\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.feature_selection import SelectKBest, f_regression  # Use f_regression for regression tasks\n",
        "\n",
        "# Optional: To visualize missing data\n",
        "import missingno as msno\n",
        "\n",
        "# Libraries for saving preprocessing objects\n",
        "import joblib\n",
        "\n",
        "# ... (Your existing code for loading and preparing the data) ...\n",
        "\n",
        "\n",
        "# Assuming you have defined X, y, numerical_cols, and categorical_cols previously\n",
        "\n",
        "# 5. Create Preprocessing Pipeline (Define 'preprocessor')\n",
        "# Define preprocessing steps for numerical and categorical features\n",
        "numerical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),  # or 'median'\n",
        "    ('scaler', StandardScaler()),\n",
        "])\n",
        "\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(sparse_output=False, handle_unknown='ignore')), # sparse=False for PCA\n",
        "])\n",
        "\n",
        "# Create a ColumnTransformer to apply the preprocessing to the correct columns\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numerical_transformer, numerical_cols),\n",
        "        ('cat', categorical_transformer, categorical_cols),\n",
        "    ])\n",
        "\n",
        "# 7. Feature Extraction and Selection\n",
        "# Example: PCA for Dimensionality Reduction and SelectKBest for feature selection\n",
        "feature_extraction_selection = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),  # Now 'preprocessor' is defined\n",
        "    ('pca', PCA(n_components=0.95)),  # Retain 95% of variance\n",
        "    ('selectkbest', SelectKBest(score_func=f_regression, k=10))  # Select top 10 features for regression\n",
        "])\n",
        "\n",
        "# Assuming feature_extraction_selection is your complete pipeline\n",
        "complete_pipeline = feature_extraction_selection  # Assign the pipeline to complete_pipeline\n",
        "\n",
        "# Fit the pipeline to your training data\n",
        "# This step is crucial to calculate explained_variance_ratio_\n",
        "complete_pipeline.fit(X_train, y_train)  # Fit the pipeline before accessing PCA attributes\n",
        "\n",
        "# 11. Visualize PCA Components (if PCA is used)\n",
        "if 'pca' in complete_pipeline.named_steps:\n",
        "    pca = complete_pipeline.named_steps['pca']\n",
        "    print(\"\\nExplained variance ratio by PCA components:\")\n",
        "    print(pca.explained_variance_ratio_)\n",
        "\n",
        "    plt.figure(figsize=(8,6))\n",
        "    plt.plot(np.cumsum(pca.explained_variance_ratio_), marker='o')\n",
        "    plt.xlabel('Number of Components')\n",
        "    plt.ylabel('Cumulative Explained Variance')\n",
        "    plt.title('PCA - Explained Variance by Components')\n",
        "    plt.grid(True)\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 688
        },
        "id": "NT9pN4ToF6xE",
        "outputId": "cd7fddca-2958-4ab0-d273-3ad006ba3f81"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/feature_selection/_univariate_selection.py:776: UserWarning: k=10 is greater than n_features=7. All the features will be returned.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Explained variance ratio by PCA components:\n",
            "[0.32623593 0.20372907 0.18995094 0.10780086 0.05432896 0.0526431\n",
            " 0.05032458]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 12. Save Preprocessing Objects (Optional)\n",
        "# Save the preprocessor\n",
        "joblib.dump(preprocessor, 'preprocessor.pkl')\n",
        "print(\"\\nPreprocessor saved as 'preprocessor.pkl'.\")\n",
        "\n",
        "# Save the complete pipeline\n",
        "joblib.dump(complete_pipeline, 'complete_pipeline.pkl')\n",
        "print(\"Complete pipeline saved as 'complete_pipeline.pkl'.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "25T6YBdOF_-e",
        "outputId": "6309d2d9-903c-4b23-cb99-a322da7c0b81"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Preprocessor saved as 'preprocessor.pkl'.\n",
            "Complete pipeline saved as 'complete_pipeline.pkl'.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 13. Example: Training a Machine Learning Model (e.g., Linear Regression)\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n",
        "\n",
        "# Initialize the model\n",
        "model = LinearRegression()\n",
        "\n",
        "# Transform the training and testing data using the pipeline\n",
        "X_train_complete = complete_pipeline.transform(X_train)  # Transform training data\n",
        "X_test_complete = complete_pipeline.transform(X_test)    # Transform testing data\n",
        "\n",
        "# Fit the model on the preprocessed training data\n",
        "model.fit(X_train_complete, y_train)\n",
        "\n",
        "# Predict on the test data\n",
        "y_pred = model.predict(X_test_complete)\n",
        "\n",
        "# Evaluate the model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "\n",
        "print(\"\\nModel Evaluation Metrics:\")\n",
        "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n",
        "print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n",
        "print(f\"R-squared (R²): {r2:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wkZi-cQtGVxw",
        "outputId": "e7d8029b-f2a0-432f-8e00-870ea3814845"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Model Evaluation Metrics:\n",
            "Mean Squared Error (MSE): 1.5047\n",
            "Mean Absolute Error (MAE): 0.9984\n",
            "R-squared (R²): 0.0005\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 14. Additional Steps (Optional)\n",
        "# - Hyperparameter Tuning using GridSearchCV or RandomizedSearchCV\n",
        "# - Cross-Validation\n",
        "# - Advanced Feature Engineering\n",
        "\n",
        "# Example: Hyperparameter Tuning with Ridge Regression\n",
        "from sklearn.linear_model import Ridge\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "# Define the parameter grid for Ridge Regression\n",
        "param_grid = {\n",
        "    'alpha': [0.1, 1.0, 10.0, 100.0],\n",
        "    'solver': ['auto', 'svd', 'cholesky']\n",
        "}\n",
        "\n",
        "# Initialize Ridge Regression\n",
        "ridge = Ridge(random_state=42)\n",
        "\n",
        "# Initialize GridSearchCV\n",
        "grid_search = GridSearchCV(\n",
        "    estimator=ridge,\n",
        "    param_grid=param_grid,\n",
        "    scoring='neg_mean_squared_error',  # Use negative MSE for regression\n",
        "    cv=5,\n",
        "    n_jobs=-1,\n",
        "    verbose=2\n",
        ")\n",
        "\n",
        "# Fit GridSearchCV\n",
        "print(\"\\nStarting GridSearchCV for Ridge Regression...\")\n",
        "grid_search.fit(X_train_complete, y_train)\n",
        "\n",
        "# Best Parameters and Model\n",
        "print(\"Best Parameters from GridSearchCV:\", grid_search.best_params_)\n",
        "best_ridge_model = grid_search.best_estimator_\n",
        "\n",
        "# Predict with the best model\n",
        "y_pred_best = best_ridge_model.predict(X_test_complete)\n",
        "\n",
        "# Evaluate the best model\n",
        "mse_best = mean_squared_error(y_test, y_pred_best)\n",
        "r2_best = r2_score(y_test, y_pred_best)\n",
        "mae_best = mean_absolute_error(y_test, y_pred_best)\n",
        "\n",
        "print(\"\\nBest Model Evaluation Metrics:\")\n",
        "print(f\"Mean Squared Error (MSE): {mse_best:.4f}\")\n",
        "print(f\"Mean Absolute Error (MAE): {mae_best:.4f}\")\n",
        "print(f\"R-squared (R²): {r2_best:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s1imFb6hGl3q",
        "outputId": "84867000-1900-434f-e65a-53eee89c93f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Starting GridSearchCV for Ridge Regression...\n",
            "Fitting 5 folds for each of 12 candidates, totalling 60 fits\n",
            "Best Parameters from GridSearchCV: {'alpha': 100.0, 'solver': 'auto'}\n",
            "\n",
            "Best Model Evaluation Metrics:\n",
            "Mean Squared Error (MSE): 1.5041\n",
            "Mean Absolute Error (MAE): 0.9980\n",
            "R-squared (R²): 0.0009\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#import necessary libraries\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.pipeline import Pipeline\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load the dataset\n",
        "data = pd.read_csv('/content/Medical_insurance (2).csv')\n",
        "\n",
        "# Define threshold for binary classification\n",
        "threshold = 15000  # Example: Charges above $15000 are considered 'high'\n",
        "\n",
        "# Create a binary target variable based on the threshold\n",
        "data['charges_category'] = (data['charges'] > threshold).astype(int)\n",
        "\n",
        "# Separate features (X) and target (y)\n",
        "X = data.drop(['charges', 'charges_category'], axis=1)\n",
        "y = data['charges_category']\n",
        "\n",
        "# Handle categorical features using OneHotEncoder\n",
        "categorical_features = ['sex', 'smoker', 'region']\n",
        "encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\n",
        "encoded_features = encoder.fit_transform(X[categorical_features])\n",
        "encoded_df = pd.DataFrame(encoded_features, columns=encoder.get_feature_names_out(categorical_features))\n",
        "X = X.drop(categorical_features, axis=1)\n",
        "X = pd.concat([X, encoded_df], axis=1)\n",
        "\n",
        "# Define numerical features\n",
        "numerical_features = ['age', 'bmi', 'children']\n",
        "\n",
        "# Create a pipeline for preprocessing and model training\n",
        "pipeline = Pipeline([\n",
        "    ('scaler', StandardScaler()),  # Standardize numerical features\n",
        "    ('logreg', LogisticRegression(solver='liblinear'))  # Use logistic regression\n",
        "])\n",
        "\n",
        "# Define a parameter grid for hyperparameter tuning\n",
        "param_grid = {\n",
        "    'logreg__C': [0.01, 0.1, 1, 10, 100],  # Regularization strength\n",
        "    'logreg__penalty': ['l1', 'l2']  # Penalty term (L1 or L2)\n",
        "}\n",
        "\n",
        "# Use cross-validation to find the best parameters\n",
        "grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='accuracy')\n",
        "grid_search.fit(X, y)\n",
        "\n",
        "# Print best parameters and best score\n",
        "print(f'Best Parameters: {grid_search.best_params_}')\n",
        "print(f'Best Cross-validation Accuracy: {grid_search.best_score_ * 100:.2f}%')\n",
        "\n",
        "# Split the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Fit the model with the best found parameters\n",
        "best_model = grid_search.best_estimator_\n",
        "best_model.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = best_model.predict(X_test)\n",
        "\n",
        "# Calculate accuracy and confusion matrix\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "conf_matrix = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "# Print the results\n",
        "print(f'Accuracy on Test Set: {accuracy * 100:.2f}%')\n",
        "print(\"Confusion Matrix:\")\n",
        "print(conf_matrix)\n",
        "\n",
        "# Plot the confusion matrix using seaborn\n",
        "plt.figure(figsize=(6, 6))\n",
        "# Change 'blacks' to 'binary' or other valid colormap name\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='binary', cbar=False)\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 668
        },
        "id": "REfS2NwaD98C",
        "outputId": "f9254ba6-42f6-4cef-e016-da6d78f608dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Parameters: {'logreg__C': 0.01, 'logreg__penalty': 'l1'}\n",
            "Best Cross-validation Accuracy: 92.71%\n",
            "Accuracy on Test Set: 92.55%\n",
            "Confusion Matrix:\n",
            "[[610   4]\n",
            " [ 58 160]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAhAAAAIjCAYAAABS7iKKAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAqbElEQVR4nO3de5yNhd7///cazDKMmXEcxmGGZJjNTVQTdoYQQg67JPfehhLa7bSdkrrbDiX3LVEoVHKKKCGlvZEhOZTzISJnyhiGGGMYzFy/P/pZ35ZxmA8z1sLr+XjM49Fc61rX9blWNV6udV1rXI7jOAIAADAI8PUAAADg1kNAAAAAMwICAACYERAAAMCMgAAAAGYEBAAAMCMgAACAGQEBAADMCAgAAGBGQAB3gJ07d+rhhx9WaGioXC6X5s6dm6Pb37dvn1wulyZNmpSj272V1a9fX/Xr1/f1GECuISCAm2T37t3q1q2bKlSooPz58yskJER169bVO++8ozNnzuTqvuPj47VlyxYNGTJEU6dO1b333pur+7uZOnXqJJfLpZCQkMu+jjt37pTL5ZLL5dLw4cPN2z906JAGDhyojRs35sC0wO0jr68HAO4E8+fP1+OPPy63262OHTuqatWqOnfunJYvX66+fftq69atev/993Nl32fOnNGqVav0yiuv6B//+Eeu7CMyMlJnzpxRvnz5cmX715I3b16lpaXpyy+/VLt27bwemzZtmvLnz6+zZ89e17YPHTqkQYMGKSoqSjVq1Mj28xYuXHhd+wNuFQQEkMv27t2r9u3bKzIyUgkJCSpVqpTnseeee067du3S/Pnzc23/R48elSSFhYXl2j5cLpfy58+fa9u/Frfbrbp16+qTTz7JEhDTp09X8+bN9fnnn9+UWdLS0lSgQAEFBgbelP0BvsJbGEAuGzZsmFJTUzVhwgSveLioYsWKeuGFFzzfX7hwQa+99pruuusuud1uRUVF6eWXX1Z6errX86KiotSiRQstX75c999/v/Lnz68KFSpoypQpnnUGDhyoyMhISVLfvn3lcrkUFRUl6fdT/xf/+Y8GDhwol8vltWzRokX685//rLCwMAUHBys6Olovv/yy5/ErXQORkJCgBx98UAULFlRYWJhatWqln3766bL727Vrlzp16qSwsDCFhoaqc+fOSktLu/ILe4kOHTro3//+t06cOOFZtmbNGu3cuVMdOnTIsv7x48fVp08fVatWTcHBwQoJCVGzZs20adMmzzpLly7VfffdJ0nq3Lmz562Qi8dZv359Va1aVevWrVO9evVUoEABz+ty6TUQ8fHxyp8/f5bjb9KkiQoXLqxDhw5l+1gBf0BAALnsyy+/VIUKFVSnTp1srd+lSxf961//Us2aNTVy5EjFxcVp6NChat++fZZ1d+3apccee0yNGzfWW2+9pcKFC6tTp07aunWrJKlt27YaOXKkJOnJJ5/U1KlT9fbbb5vm37p1q1q0aKH09HQNHjxYb731lh599FGtWLHiqs/75ptv1KRJEx05ckQDBw5Ur169tHLlStWtW1f79u3Lsn67du106tQpDR06VO3atdOkSZM0aNCgbM/Ztm1buVwuzZ4927Ns+vTpqly5smrWrJll/T179mju3Llq0aKFRowYob59+2rLli2Ki4vz/GFepUoVDR48WJLUtWtXTZ06VVOnTlW9evU82zl27JiaNWumGjVq6O2331aDBg0uO98777yj4sWLKz4+XhkZGZKk8ePHa+HChRo9erQiIiKyfayAX3AA5JqTJ086kpxWrVpla/2NGzc6kpwuXbp4Le/Tp48jyUlISPAsi4yMdCQ5y5Yt8yw7cuSI43a7nd69e3uW7d2715HkvPnmm17bjI+PdyIjI7PMMGDAAOePPxpGjhzpSHKOHj16xbkv7mPixImeZTVq1HBKlCjhHDt2zLNs06ZNTkBAgNOxY8cs+3vqqae8ttmmTRunaNGiV9znH4+jYMGCjuM4zmOPPeY0bNjQcRzHycjIcEqWLOkMGjTosq/B2bNnnYyMjCzH4Xa7ncGDB3uWrVmzJsuxXRQXF+dIcsaNG3fZx+Li4ryWLViwwJHkvP76686ePXuc4OBgp3Xr1tc8RsAfcQYCyEUpKSmSpEKFCmVr/a+//lqS1KtXL6/lvXv3lqQs10rExMTowQcf9HxfvHhxRUdHa8+ePdc986UuXjvxxRdfKDMzM1vPSUxM1MaNG9WpUycVKVLEs/y//uu/1LhxY89x/lH37t29vn/wwQd17Ngxz2uYHR06dNDSpUt1+PBhJSQk6PDhw5d9+0L6/bqJgIDffwRmZGTo2LFjnrdn1q9fn+19ut1ude7cOVvrPvzww+rWrZsGDx6stm3bKn/+/Bo/fny29wX4EwICyEUhISGSpFOnTmVr/f379ysgIEAVK1b0Wl6yZEmFhYVp//79XsvLlSuXZRuFCxfWb7/9dp0TZ/XEE0+obt266tKli8LDw9W+fXt9+umnV42Ji3NGR0dneaxKlSpKTk7W6dOnvZZfeiyFCxeWJNOxPPLIIypUqJBmzpypadOm6b777svyWl6UmZmpkSNH6u6775bb7VaxYsVUvHhxbd68WSdPnsz2PkuXLm26YHL48OEqUqSINm7cqFGjRqlEiRLZfi7gTwgIIBeFhIQoIiJCP/74o+l5l17EeCV58uS57HLHca57Hxffn78oKChIy5Yt0zfffKO//e1v2rx5s5544gk1btw4y7o34kaO5SK32622bdtq8uTJmjNnzhXPPkjSG2+8oV69eqlevXr6+OOPtWDBAi1atEh/+tOfsn2mRfr99bHYsGGDjhw5IknasmWL6bmAPyEggFzWokUL7d69W6tWrbrmupGRkcrMzNTOnTu9liclJenEiROeOypyQuHChb3uWLjo0rMckhQQEKCGDRtqxIgR2rZtm4YMGaKEhAQtWbLkstu+OOeOHTuyPLZ9+3YVK1ZMBQsWvLEDuIIOHTpow4YNOnXq1GUvPL1o1qxZatCggSZMmKD27dvr4YcfVqNGjbK8JtmNuew4ffq0OnfurJiYGHXt2lXDhg3TmjVrcmz7wM1EQAC57MUXX1TBggXVpUsXJSUlZXl89+7deueddyT9fgpeUpY7JUaMGCFJat68eY7Nddddd+nkyZPavHmzZ1liYqLmzJnjtd7x48ezPPfiBypdemvpRaVKlVKNGjU0efJkrz+Qf/zxRy1cuNBznLmhQYMGeu211zRmzBiVLFnyiuvlyZMny9mNzz77TL/++qvXsouhc7nYsurXr58OHDigyZMna8SIEYqKilJ8fPwVX0fAn/FBUkAuu+uuuzR9+nQ98cQTqlKlitcnUa5cuVKfffaZOnXqJEmqXr264uPj9f777+vEiROKi4vT6tWrNXnyZLVu3fqKtwhej/bt26tfv35q06aNevToobS0NI0dO1aVKlXyuohw8ODBWrZsmZo3b67IyEgdOXJE7733nsqUKaM///nPV9z+m2++qWbNmql27dp6+umndebMGY0ePVqhoaEaOHBgjh3HpQICAvQ///M/11yvRYsWGjx4sDp37qw6depoy5YtmjZtmipUqOC1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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 896
        },
        "id": "FnklQROmBQ5x",
        "outputId": "48b42c88-4d12-4af0-9435-9baa205a010a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:697: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.439e+07, tolerance: 3.305e+07\n",
            "  model = cd_fast.enet_coordinate_descent(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:697: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.402e+07, tolerance: 3.312e+07\n",
            "  model = cd_fast.enet_coordinate_descent(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:697: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.440e+07, tolerance: 3.305e+07\n",
            "  model = cd_fast.enet_coordinate_descent(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:697: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.451e+07, tolerance: 3.305e+07\n",
            "  model = cd_fast.enet_coordinate_descent(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:697: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.413e+07, tolerance: 3.312e+07\n",
            "  model = cd_fast.enet_coordinate_descent(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Parameters: {'lasso__alpha': 10}\n",
            "Best Cross-validation Score (Negative MSE): -36898744.68\n",
            "Mean Squared Error (MSE): 40022947.84\n",
            "R² Score: 0.74\n",
            "Classification Accuracy (Above/Below Threshold): 89.90%\n",
            "Confusion Matrix:\n",
            "[[582  32]\n",
            " [ 52 166]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.linear_model import Lasso\n",
        "from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.pipeline import Pipeline\n",
        "import numpy as np\n",
        "\n",
        "# Load the dataset\n",
        "data = pd.read_csv('/content/Medical_insurance (2).csv')\n",
        "\n",
        "# Define threshold for binary classification (for calculating accuracy)\n",
        "threshold = 15000  # Example: Charges above $15000 are considered 'high'\n",
        "\n",
        "# Separate features (X) and target (y)\n",
        "X = data.drop(['charges'], axis=1)\n",
        "y = data['charges']\n",
        "\n",
        "# Handle categorical features using OneHotEncoder\n",
        "categorical_features = ['sex', 'smoker', 'region']\n",
        "encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\n",
        "encoded_features = encoder.fit_transform(X[categorical_features])\n",
        "encoded_df = pd.DataFrame(encoded_features, columns=encoder.get_feature_names_out(categorical_features))\n",
        "X = X.drop(categorical_features, axis=1)\n",
        "X = pd.concat([X, encoded_df], axis=1)\n",
        "\n",
        "# Define numerical features\n",
        "numerical_features = ['age', 'bmi', 'children']\n",
        "\n",
        "# Create a pipeline for preprocessing and Lasso model training\n",
        "pipeline = Pipeline([\n",
        "    ('scaler', StandardScaler()),  # Standardize numerical features\n",
        "    ('lasso', Lasso())  # Lasso (L1 regularization)\n",
        "])\n",
        "\n",
        "# Set up a grid search for hyperparameter tuning (regularization strength alpha)\n",
        "param_grid = {\n",
        "    'lasso__alpha': [0.001, 0.01, 0.1, 1, 10, 100]  # Alpha values to try (Lasso regularization parameter)\n",
        "}\n",
        "\n",
        "# Use cross-validation to find the best parameters\n",
        "grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='neg_mean_squared_error')\n",
        "grid_search.fit(X, y)\n",
        "\n",
        "# Print best parameters and best score (negative mean squared error)\n",
        "print(f'Best Parameters: {grid_search.best_params_}')\n",
        "print(f'Best Cross-validation Score (Negative MSE): {grid_search.best_score_:.2f}')\n",
        "\n",
        "# Split the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Fit the model with the best-found parameters\n",
        "best_model = grid_search.best_estimator_\n",
        "best_model.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set (continuous values)\n",
        "y_pred_continuous = best_model.predict(X_test)\n",
        "\n",
        "# Convert continuous predictions to binary classification (above or below threshold)\n",
        "y_pred_class = (y_pred_continuous > threshold).astype(int)\n",
        "y_test_class = (y_test > threshold).astype(int)\n",
        "\n",
        "# Calculate accuracy and confusion matrix for binary classification\n",
        "accuracy = accuracy_score(y_test_class, y_pred_class)\n",
        "conf_matrix = confusion_matrix(y_test_class, y_pred_class)\n",
        "\n",
        "# Calculate regression metrics\n",
        "mse = mean_squared_error(y_test, y_pred_continuous)\n",
        "r2 = r2_score(y_test, y_pred_continuous)\n",
        "\n",
        "# Print regression results\n",
        "print(f'Mean Squared Error (MSE): {mse:.2f}')\n",
        "print(f'R² Score: {r2:.2f}')\n",
        "\n",
        "# Print classification results\n",
        "print(f'Classification Accuracy (Above/Below Threshold): {accuracy * 100:.2f}%')\n",
        "print(\"Confusion Matrix:\")\n",
        "print(conf_matrix)\n",
        "# Plot the confusion matrix using seaborn\n",
        "plt.figure(figsize=(6, 6))\n",
        "# Change 'blacks' to 'binary' or other valid colormap name\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='binary', cbar=False)\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 740
        },
        "id": "uAVRp1qFEe1c",
        "outputId": "274d35d7-df20-402f-8de1-ffdb654ae254"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 972 candidates, totalling 4860 fits\n",
            "Best Parameters: {'colsample_bytree': 0.8, 'gamma': 0, 'learning_rate': 0.2, 'max_depth': 7, 'min_child_weight': 1, 'n_estimators': 100, 'subsample': 0.8}\n",
            "Best Cross-validation Score (Negative MSE): -12337383.37\n",
            "Mean Squared Error (MSE): 9195321.64\n",
            "R² Score: 0.94\n",
            "Classification Accuracy (Above/Below Threshold): 95.67%\n",
            "Confusion Matrix:\n",
            "[[591  23]\n",
            " [ 13 205]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix\n",
        "import xgboost as xgb\n",
        "import numpy as np\n",
        "\n",
        "# Load the dataset\n",
        "data = pd.read_csv('/content/Medical_insurance (2).csv')\n",
        "\n",
        "# Define threshold for binary classification (for calculating accuracy)\n",
        "threshold = 15000  # Example: Charges above $15000 are considered 'high'\n",
        "\n",
        "# Separate features (X) and target (y)\n",
        "X = data.drop(['charges'], axis=1)\n",
        "y = data['charges']\n",
        "\n",
        "# Handle categorical features using OneHotEncoder\n",
        "categorical_features = ['sex', 'smoker', 'region']\n",
        "encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\n",
        "encoded_features = encoder.fit_transform(X[categorical_features])\n",
        "encoded_df = pd.DataFrame(encoded_features, columns=encoder.get_feature_names_out(categorical_features))\n",
        "X = X.drop(categorical_features, axis=1)\n",
        "X = pd.concat([X, encoded_df], axis=1)\n",
        "\n",
        "# Define numerical features\n",
        "numerical_features = ['age', 'bmi', 'children']\n",
        "\n",
        "# Standardize the numerical features using StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X[numerical_features] = scaler.fit_transform(X[numerical_features])\n",
        "\n",
        "# Split the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Set up an XGBoost regression model\n",
        "xgb_model = xgb.XGBRegressor()\n",
        "\n",
        "# Define the hyperparameters to tune\n",
        "param_grid = {\n",
        "    'n_estimators': [100, 200, 300],          # Number of boosting rounds\n",
        "    'learning_rate': [0.01, 0.1, 0.2],        # Step size shrinkage\n",
        "    'max_depth': [3, 5, 7],                   # Maximum depth of trees\n",
        "    'min_child_weight': [1, 3, 5],            # Minimum sum of instance weight (hessian) needed in a child\n",
        "    'gamma': [0, 0.1, 0.3],                   # Minimum loss reduction required to make a further partition\n",
        "    'subsample': [0.8, 1],                    # Fraction of samples to be used for each tree\n",
        "    'colsample_bytree': [0.8, 1]              # Fraction of features to be used by each tree\n",
        "}\n",
        "\n",
        "# Use GridSearchCV to find the best hyperparameters\n",
        "grid_search = GridSearchCV(estimator=xgb_model, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error', verbose=1, n_jobs=-1)\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Print the best parameters and best score\n",
        "print(f'Best Parameters: {grid_search.best_params_}')\n",
        "print(f'Best Cross-validation Score (Negative MSE): {grid_search.best_score_:.2f}')\n",
        "\n",
        "# Fit the model with the best-found parameters\n",
        "best_model = grid_search.best_estimator_\n",
        "best_model.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set (continuous values)\n",
        "y_pred_continuous = best_model.predict(X_test)\n",
        "\n",
        "# Convert continuous predictions to binary classification (above or below threshold)\n",
        "y_pred_class = (y_pred_continuous > threshold).astype(int)\n",
        "y_test_class = (y_test > threshold).astype(int)\n",
        "\n",
        "# Calculate accuracy and confusion matrix for binary classification\n",
        "accuracy = accuracy_score(y_test_class, y_pred_class)\n",
        "conf_matrix = confusion_matrix(y_test_class, y_pred_class)\n",
        "\n",
        "# Calculate regression metrics\n",
        "mse = mean_squared_error(y_test, y_pred_continuous)\n",
        "r2 = r2_score(y_test, y_pred_continuous)\n",
        "\n",
        "# Print regression results\n",
        "print(f'Mean Squared Error (MSE): {mse:.2f}')\n",
        "print(f'R² Score: {r2:.2f}')\n",
        "\n",
        "# Print classification results\n",
        "print(f'Classification Accuracy (Above/Below Threshold): {accuracy * 100:.2f}%')\n",
        "print(\"Confusion Matrix:\")\n",
        "print(conf_matrix)\n",
        "# Plot the confusion matrix using seaborn\n",
        "plt.figure(figsize=(6, 6))\n",
        "# Change 'blacks' to 'binary' or other valid colormap name\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='binary', cbar=False)\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 775
        },
        "id": "SH1LwgMiHGW7",
        "outputId": "dbebc8fe-020d-4490-e162-9d0eb7837d55"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 162 candidates, totalling 810 fits\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/numpy/ma/core.py:2820: RuntimeWarning: invalid value encountered in cast\n",
            "  _data = np.array(data, dtype=dtype, copy=copy,\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Parameters: {'bootstrap': True, 'max_depth': 15, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 300}\n",
            "Best Cross-validation Score (Negative MSE): -13304815.59\n",
            "Mean Squared Error (MSE): 10292595.73\n",
            "R² Score: 0.93\n",
            "Classification Accuracy (Above/Below Threshold): 95.67%\n",
            "Confusion Matrix:\n",
            "[[594  20]\n",
            " [ 16 202]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix\n",
        "import numpy as np\n",
        "\n",
        "# Load the dataset\n",
        "data = pd.read_csv('/content/Medical_insurance (2).csv')\n",
        "\n",
        "# Define threshold for binary classification (for calculating accuracy)\n",
        "threshold = 15000  # Example: Charges above $15000 are considered 'high'\n",
        "\n",
        "# Separate features (X) and target (y)\n",
        "X = data.drop(['charges'], axis=1)\n",
        "y = data['charges']\n",
        "\n",
        "# Handle categorical features using OneHotEncoder\n",
        "categorical_features = ['sex', 'smoker', 'region']\n",
        "encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\n",
        "encoded_features = encoder.fit_transform(X[categorical_features])\n",
        "encoded_df = pd.DataFrame(encoded_features, columns=encoder.get_feature_names_out(categorical_features))\n",
        "X = X.drop(categorical_features, axis=1)\n",
        "X = pd.concat([X, encoded_df], axis=1)\n",
        "\n",
        "# Define numerical features\n",
        "numerical_features = ['age', 'bmi', 'children']\n",
        "\n",
        "# Standardize the numerical features using StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X[numerical_features] = scaler.fit_transform(X[numerical_features])\n",
        "\n",
        "# Split the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Set up a Random Forest regression model\n",
        "rf_model = RandomForestRegressor(random_state=42)\n",
        "\n",
        "# Define the hyperparameters to tune\n",
        "param_grid = {\n",
        "    'n_estimators': [100, 200, 300],        # Number of trees\n",
        "    'max_depth': [5, 10, 15],               # Maximum depth of the tree\n",
        "    'min_samples_split': [2, 5, 10],        # Minimum number of samples required to split an internal node\n",
        "    'min_samples_leaf': [1, 2, 4],          # Minimum number of samples required to be at a leaf node\n",
        "    'bootstrap': [True, False]              # Whether to bootstrap samples\n",
        "}\n",
        "\n",
        "# Use GridSearchCV to find the best hyperparameters\n",
        "grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error', verbose=1, n_jobs=-1)\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Print the best parameters and best score\n",
        "print(f'Best Parameters: {grid_search.best_params_}')\n",
        "print(f'Best Cross-validation Score (Negative MSE): {grid_search.best_score_:.2f}')\n",
        "\n",
        "# Fit the model with the best-found parameters\n",
        "best_model = grid_search.best_estimator_\n",
        "best_model.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set (continuous values)\n",
        "y_pred_continuous = best_model.predict(X_test)\n",
        "\n",
        "# Convert continuous predictions to binary classification (above or below threshold)\n",
        "y_pred_class = (y_pred_continuous > threshold).astype(int)\n",
        "y_test_class = (y_test > threshold).astype(int)\n",
        "\n",
        "# Calculate accuracy and confusion matrix for binary classification\n",
        "accuracy = accuracy_score(y_test_class, y_pred_class)\n",
        "conf_matrix = confusion_matrix(y_test_class, y_pred_class)\n",
        "\n",
        "# Calculate regression metrics\n",
        "mse = mean_squared_error(y_test, y_pred_continuous)\n",
        "r2 = r2_score(y_test, y_pred_continuous)\n",
        "\n",
        "# Print regression results\n",
        "print(f'Mean Squared Error (MSE): {mse:.2f}')\n",
        "print(f'R² Score: {r2:.2f}')\n",
        "\n",
        "# Print classification results\n",
        "print(f'Classification Accuracy (Above/Below Threshold): {accuracy * 100:.2f}%')\n",
        "print(\"Confusion Matrix:\")\n",
        "print(conf_matrix)\n",
        "\n",
        "# Plot the confusion matrix using seaborn\n",
        "plt.figure(figsize=(6, 6))\n",
        "# Change 'blacks' to 'binary' or other valid colormap name\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='binary', cbar=False)\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.linear_model import Ridge\n",
        "from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load the dataset\n",
        "data = pd.read_csv('/content/Medical_insurance (2).csv')\n",
        "\n",
        "# Define threshold for binary classification (for calculating accuracy)\n",
        "threshold = 15000  # Example: Charges above $15000 are considered 'high'\n",
        "\n",
        "# Separate features (X) and target (y)\n",
        "X = data.drop(['charges'], axis=1)\n",
        "y = data['charges']\n",
        "\n",
        "# Handle categorical features using OneHotEncoder\n",
        "categorical_features = ['sex', 'smoker', 'region']\n",
        "encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\n",
        "encoded_features = encoder.fit_transform(X[categorical_features])\n",
        "encoded_df = pd.DataFrame(encoded_features, columns=encoder.get_feature_names_out(categorical_features))\n",
        "X = X.drop(categorical_features, axis=1)\n",
        "X = pd.concat([X, encoded_df], axis=1)\n",
        "\n",
        "# Define numerical features\n",
        "numerical_features = ['age', 'bmi', 'children']\n",
        "\n",
        "# Standardize numerical features\n",
        "scaler = StandardScaler()\n",
        "X[numerical_features] = scaler.fit_transform(X[numerical_features])\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Define the Ridge Regression model with a range of alpha values for tuning\n",
        "ridge_model = Ridge()\n",
        "\n",
        "# Use GridSearchCV to find the best alpha\n",
        "param_grid = {'alpha': [0.01, 0.1, 1, 10, 100, 1000]}  # Testing various alpha values\n",
        "grid_search = GridSearchCV(ridge_model, param_grid, cv=5, scoring='neg_mean_squared_error')\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Best model after hyperparameter tuning\n",
        "best_ridge_model = grid_search.best_estimator_\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = best_ridge_model.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Best Alpha: {grid_search.best_params_['alpha']}\")\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R-squared: {r2}\")\n",
        "\n",
        "# For accuracy (binary classification based on threshold)\n",
        "y_pred_class = (y_pred > threshold).astype(int)\n",
        "y_test_class = (y_test > threshold).astype(int)\n",
        "accuracy = accuracy_score(y_test_class, y_pred_class)\n",
        "print(f\"Accuracy (Above/Below Threshold): {accuracy * 100:.2f}%\")\n",
        "\n",
        "# Generate the confusion matrix\n",
        "conf_matrix = confusion_matrix(y_test_class, y_pred_class)\n",
        "\n",
        "# Print the confusion matrix\n",
        "print(\"Confusion Matrix:\")\n",
        "print(conf_matrix)\n",
        "\n",
        "# Plot the confusion matrix using seaborn\n",
        "plt.figure(figsize=(6, 6))\n",
        "# Change 'blacks' to 'binary' or other valid colormap name\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='binary', cbar=False)\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 685
        },
        "id": "nKOc7xtqKz4c",
        "outputId": "22517751-ec05-4636-c119-dac98785ca7c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Alpha: 1\n",
            "Mean Squared Error: 39938755.397154935\n",
            "R-squared: 0.7397803862316481\n",
            "Accuracy (Above/Below Threshold): 90.09%\n",
            "Confusion Matrix:\n",
            "[[397  18]\n",
            " [ 37 103]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Install required libraries\n",
        "!pip install pandas scikit-learn matplotlib graphviz pydotplus\n",
        "\n",
        "# Step 2: Import necessary packages\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier, export_graphviz\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import tree\n",
        "import pydotplus\n",
        "from IPython.display import Image\n",
        "from io import StringIO\n",
        "\n",
        "# Step 3: Load the dataset\n",
        "file_path = '/content/Medical_insurance (2).csv'  # Path to your dataset\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Step 4: Preprocess the data\n",
        "# Inspecting the dataset\n",
        "print(df.head())\n",
        "print(df.info())\n",
        "\n",
        "# For this example, we'll assume that the dataset needs to be split into features and target.\n",
        "# Assume 'smoker' is the target variable (binary classification problem).\n",
        "\n",
        "# Encoding categorical variables if necessary\n",
        "# Get a list of categorical columns (excluding the target 'smoker')\n",
        "categorical_cols = [col for col in df.columns if df[col].dtype == 'object' and col != 'smoker']\n",
        "df = pd.get_dummies(df, columns=categorical_cols, drop_first=True) # Only encode categorical features other than smoker\n",
        "\n",
        "# Handling missing values (if any)\n",
        "df = df.dropna()\n",
        "\n",
        "# Splitting into features (X) and target (y)\n",
        "X = df.drop('smoker', axis=1)  # Drop the target column (Churn_Yes after get_dummies)\n",
        "y = df['smoker']  # Target column (Churn_Yes after get_dummies)\n",
        "\n",
        "\n",
        "# Step 5: Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Step 6: Train the J48/DecisionTreeClassifier model\n",
        "clf = DecisionTreeClassifier(criterion='entropy')  # J48 uses entropy (information gain)\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "# Step 7: Predict on test data\n",
        "y_pred = clf.predict(X_test)\n",
        "\n",
        "# Step 8: Analyze performance\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
        "print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n",
        "print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n",
        "\n",
        "# Plot the confusion matrix using seaborn\n",
        "plt.figure(figsize=(6, 6))\n",
        "# Change 'blacks' to 'binary' or other valid colormap name\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='binary', cbar=False)\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()\n",
        "\n",
        "# Step 9: Visualize the decision tree\n",
        "plt.figure(figsize=(20,10))\n",
        "tree.plot_tree(clf, filled=True, feature_names=X.columns, class_names=['Not smoker', 'smoker'])\n",
        "plt.show()\n",
        "\n",
        "# Generate DOT data\n",
        "dot_data = export_graphviz(clf, out_file=None,\n",
        "                         feature_names=X.columns,\n",
        "                         class_names=['Not smoker', 'smoker'],\n",
        "                         filled=True, rounded=True,\n",
        "                         special_characters=True)\n",
        "\n",
        "# Create graph from DOT data\n",
        "graph = pydotplus.graph_from_dot_data(dot_data) # Pass the dot_data string directly\n",
        "\n",
        "# Display the graph (optional)\n",
        "#Image(graph.create_png())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "n05sIhKkNhOq",
        "outputId": "488eaf27-cf39-40b0-962c-cb55a3bba2b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.5.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n",
            "Requirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (0.20.3)\n",
            "Requirement already satisfied: pydotplus in /usr/local/lib/python3.10/dist-packages (2.0.2)\n",
            "Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.3.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.54.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.7)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (10.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.2.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
            "   age     sex     bmi  children smoker     region      charges\n",
            "0   19  female  27.900         0    yes  southwest  16884.92400\n",
            "1   18    male  33.770         1     no  southeast   1725.55230\n",
            "2   28    male  33.000         3     no  southeast   4449.46200\n",
            "3   33    male  22.705         0     no  northwest  21984.47061\n",
            "4   32    male  28.880         0     no  northwest   3866.85520\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2772 entries, 0 to 2771\n",
            "Data columns (total 7 columns):\n",
            " #   Column    Non-Null Count  Dtype  \n",
            "---  ------    --------------  -----  \n",
            " 0   age       2772 non-null   int64  \n",
            " 1   sex       2772 non-null   object \n",
            " 2   bmi       2772 non-null   float64\n",
            " 3   children  2772 non-null   int64  \n",
            " 4   smoker    2772 non-null   object \n",
            " 5   region    2772 non-null   object \n",
            " 6   charges   2772 non-null   float64\n",
            "dtypes: float64(2), int64(2), object(3)\n",
            "memory usage: 151.7+ KB\n",
            "None\n",
            "Accuracy: 0.9855769230769231\n",
            "Confusion Matrix:\n",
            " [[662   6]\n",
            " [  6 158]]\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "          no       0.99      0.99      0.99       668\n",
            "         yes       0.96      0.96      0.96       164\n",
            "\n",
            "    accuracy                           0.99       832\n",
            "   macro avg       0.98      0.98      0.98       832\n",
            "weighted avg       0.99      0.99      0.99       832\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1000 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pandas scikit-learn\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "\n",
        "# Load the dataset\n",
        "data = pd.read_csv('/content/Medical_insurance (2).csv')\n",
        "\n",
        "# Define threshold for binary classification (for calculating accuracy)\n",
        "threshold = 15000  # Example: Charges above $15000 are considered 'high'\n",
        "\n",
        "# Separate features (X) and target (y)\n",
        "X = data.drop(['charges'], axis=1)\n",
        "y = data['charges']\n",
        "\n",
        "# Handle categorical features using OneHotEncoder\n",
        "categorical_features = ['sex', 'smoker', 'region']\n",
        "encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\n",
        "encoded_features = encoder.fit_transform(X[categorical_features])\n",
        "encoded_df = pd.DataFrame(encoded_features, columns=encoder.get_feature_names_out(categorical_features))\n",
        "X = X.drop(categorical_features, axis=1)\n",
        "X = pd.concat([X, encoded_df], axis=1)\n",
        "\n",
        "# Define numerical features\n",
        "numerical_features = ['age', 'bmi', 'children']\n",
        "\n",
        "# Standardize numerical features\n",
        "scaler = StandardScaler()\n",
        "X[numerical_features] = scaler.fit_transform(X[numerical_features])\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Convert target to binary classes based on threshold\n",
        "y_train_class = (y_train > threshold).astype(int)\n",
        "y_test_class = (y_test > threshold).astype(int)\n",
        "\n",
        "# Create and train the KNN classifier\n",
        "knn_classifier = KNeighborsClassifier(n_neighbors=5)  # You can adjust the number of neighbors (k)\n",
        "knn_classifier.fit(X_train, y_train_class)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred_class = knn_classifier.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "accuracy = accuracy_score(y_test_class, y_pred_class)\n",
        "conf_matrix = confusion_matrix(y_test_class, y_pred_class)\n",
        "classification_rep = classification_report(y_test_class, y_pred_class)\n",
        "\n",
        "\n",
        "# Print results\n",
        "print(f\"Accuracy: {accuracy * 100:.2f}%\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(conf_matrix)\n",
        "print(\"Classification Report:\")\n",
        "print(classification_rep)\n",
        "\n",
        "# Plot the confusion matrix using seaborn\n",
        "plt.figure(figsize=(6, 6))\n",
        "# Change 'blacks' to 'binary' or other valid colormap name\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='binary', cbar=False)\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "18RlWT8rPrXf",
        "outputId": "38ba17a8-bdc3-4647-8fb8-5ad934bebd05"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.5.2)\n",
            "Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
            "Accuracy: 92.79%\n",
            "Confusion Matrix:\n",
            "[[604  10]\n",
            " [ 50 168]]\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.98      0.95       614\n",
            "           1       0.94      0.77      0.85       218\n",
            "\n",
            "    accuracy                           0.93       832\n",
            "   macro avg       0.93      0.88      0.90       832\n",
            "weighted avg       0.93      0.93      0.93       832\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pandas scikit-learn\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.ensemble import GradientBoostingRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix\n",
        "\n",
        "# Load the dataset\n",
        "data = pd.read_csv('/content/Medical_insurance (2).csv')\n",
        "\n",
        "# Separate features (X) and target (y)\n",
        "X = data.drop(['charges'], axis=1)\n",
        "y = data['charges']\n",
        "\n",
        "# Handle categorical features using OneHotEncoder\n",
        "categorical_features = ['sex', 'smoker', 'region']\n",
        "encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\n",
        "encoded_features = encoder.fit_transform(X[categorical_features])\n",
        "encoded_df = pd.DataFrame(encoded_features, columns=encoder.get_feature_names_out(categorical_features))\n",
        "X = X.drop(categorical_features, axis=1)\n",
        "X = pd.concat([X, encoded_df], axis=1)\n",
        "\n",
        "# Define numerical features\n",
        "numerical_features = ['age', 'bmi', 'children']\n",
        "\n",
        "# Standardize numerical features\n",
        "scaler = StandardScaler()\n",
        "X[numerical_features] = scaler.fit_transform(X[numerical_features])\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Create and train the Gradient Boosting Regressor\n",
        "gb_regressor = GradientBoostingRegressor(random_state=42)\n",
        "\n",
        "# Define hyperparameter grid for tuning (optional)\n",
        "# param_grid = {\n",
        "#     'n_estimators': [100, 200, 300],\n",
        "#     'learning_rate': [0.01, 0.1, 0.2],\n",
        "#     'max_depth': [3, 5, 7],\n",
        "# }\n",
        "\n",
        "# # Use GridSearchCV for hyperparameter tuning (optional)\n",
        "# # Uncomment the following lines if you want to perform hyperparameter tuning:\n",
        "# grid_search = GridSearchCV(gb_regressor, param_grid, cv=5, scoring='neg_mean_squared_error')\n",
        "# grid_search.fit(X_train, y_train)\n",
        "# best_gb_regressor = grid_search.best_estimator_\n",
        "\n",
        "# If you're not using GridSearchCV, fit the model here:\n",
        "best_gb_regressor = gb_regressor\n",
        "best_gb_regressor.fit(X_train, y_train) # This line fits the model to the training data\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = best_gb_regressor.predict(X_test)\n",
        "\n",
        "# Define a threshold for binary classification\n",
        "threshold = 15000  # Example threshold\n",
        "\n",
        "# Convert continuous predictions to binary classes\n",
        "y_pred_class = (y_pred > threshold).astype(int)\n",
        "y_test_class = (y_test > threshold).astype(int)\n",
        "\n",
        "# Calculate accuracy and confusion matrix\n",
        "accuracy = accuracy_score(y_test_class, y_pred_class)\n",
        "conf_matrix = confusion_matrix(y_test_class, y_pred_class)\n",
        "\n",
        "# Evaluate the model (regression metrics)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "# Print the results\n",
        "# print(f\"Best Hyperparameters: {grid_search.best_params_}\")  # If using GridSearchCV\n",
        "print(f\"Mean Squared Error (MSE): {mse:.2f}\")\n",
        "print(f\"R-squared (R2): {r2:.2f}\")\n",
        "\n",
        "# Print accuracy and confusion matrix for binary classification\n",
        "print(f\"Accuracy (Above/Below Threshold): {accuracy * 100:.2f}%\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(conf_matrix)\n",
        "\n",
        "# Plot the confusion matrix using seaborn\n",
        "plt.figure(figsize=(6, 6))\n",
        "# Change 'blacks' to 'binary' or other valid colormap name\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='binary', cbar=False)\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 862
        },
        "id": "ft3GMyPnQOoN",
        "outputId": "85088dcd-7dac-4cd3-f94a-d0848fb5c8c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.5.2)\n",
            "Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
            "Mean Squared Error (MSE): 18974989.00\n",
            "R-squared (R2): 0.88\n",
            "Accuracy (Above/Below Threshold): 91.59%\n",
            "Confusion Matrix:\n",
            "[[591  23]\n",
            " [ 47 171]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pandas scikit-learn\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.ensemble import GradientBoostingRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix\n",
        "\n",
        "# 1. Load Your Dataset\n",
        "data = pd.read_csv('/content/Medical_insurance (2).csv')\n",
        "\n",
        "# 2. Separate Features (X) and Target (y)\n",
        "X = data.drop(['charges'], axis=1)\n",
        "y = data['charges']\n",
        "\n",
        "# 3. Handle Categorical Features\n",
        "categorical_features = ['sex', 'smoker', 'region']\n",
        "encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\n",
        "encoded_features = encoder.fit_transform(X[categorical_features])\n",
        "encoded_df = pd.DataFrame(encoded_features, columns=encoder.get_feature_names_out(categorical_features))\n",
        "X = X.drop(categorical_features, axis=1)\n",
        "X = pd.concat([X, encoded_df], axis=1)\n",
        "\n",
        "# 4. Define Numerical Features\n",
        "numerical_features = ['age', 'bmi', 'children']\n",
        "\n",
        "# 5. Standardize Numerical Features\n",
        "scaler = StandardScaler()\n",
        "X[numerical_features] = scaler.fit_transform(X[numerical_features])\n",
        "\n",
        "# 6. Split Data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# 7. Create and Train the Model\n",
        "gb_regressor = GradientBoostingRegressor(random_state=42)\n",
        "gb_regressor.fit(X_train, y_train)\n",
        "\n",
        "# 8. Make Predictions\n",
        "y_pred = gb_regressor.predict(X_test)\n",
        "\n",
        "# 9. Evaluate Regression Performance\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "print(f\"Mean Squared Error (MSE): {mse:.2f}\")\n",
        "print(f\"R-squared (R2): {r2:.2f}\")\n",
        "\n",
        "# 10. Establish a Threshold for Binary Classification\n",
        "threshold = 15000  # Example threshold (adjust as needed)\n",
        "\n",
        "# 11. Convert Predictions to Binary Classes\n",
        "y_pred_class = (y_pred > threshold).astype(int)\n",
        "y_test_class = (y_test > threshold).astype(int)\n",
        "\n",
        "# 12. Calculate Accuracy and Confusion Matrix\n",
        "accuracy = accuracy_score(y_test_class, y_pred_class)\n",
        "conf_matrix = confusion_matrix(y_test_class, y_pred_class)\n",
        "\n",
        "print(f\"Accuracy (Above/Below Threshold): {accuracy * 100:.2f}%\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(conf_matrix)\n",
        "\n",
        "# Plot the confusion matrix using seaborn\n",
        "plt.figure(figsize=(6, 6))\n",
        "# Change 'blacks' to 'binary' or other valid colormap name\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='binary', cbar=False)\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 862
        },
        "id": "hggFOZCqTTw1",
        "outputId": "8a41af58-27cf-4703-bb41-650a8e43ff9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.5.2)\n",
            "Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
            "Mean Squared Error (MSE): 18974989.00\n",
            "R-squared (R2): 0.88\n",
            "Accuracy (Above/Below Threshold): 91.59%\n",
            "Confusion Matrix:\n",
            "[[591  23]\n",
            " [ 47 171]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from sklearn.neural_network import MLPRegressor\n",
        "from sklearn.metrics import mean_squared_error, confusion_matrix, ConfusionMatrixDisplay\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load the dataset\n",
        "data = pd.read_csv(\"/content/Medical_insurance (2).csv\")\n",
        "\n",
        "# Preprocessing\n",
        "# Creating a target variable with 3 categories based on charges\n",
        "# Define charge thresholds for the categories (adjust as needed)\n",
        "low_threshold = data['charges'].quantile(0.33)  # 33rd percentile\n",
        "high_threshold = data['charges'].quantile(0.66)  # 66th percentile\n",
        "\n",
        "data['target'] = pd.cut(data['charges'],\n",
        "                        bins=[data['charges'].min(), low_threshold, high_threshold, data['charges'].max()],\n",
        "                        labels=[0, 1, 2],  # 0: Low, 1: Medium, 2: High\n",
        "                        include_lowest=True)\n",
        "\n",
        "# Dropping unnecessary columns\n",
        "# Replaced 'Patient Id' with 'bmi'\n",
        "data.drop(['bmi', 'charges'], axis=1, inplace=True)\n",
        "\n",
        "# Encoding categorical variables\n",
        "label_encoders = {}\n",
        "for column in data.select_dtypes(include=['object']).columns:\n",
        "    le = LabelEncoder()\n",
        "    data[column] = le.fit_transform(data[column])\n",
        "    label_encoders[column] = le\n",
        "\n",
        "# Splitting the dataset\n",
        "X = data.drop('target', axis=1)\n",
        "y = data['target']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Feature Scaling\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)\n",
        "\n",
        "# Training the MLP model\n",
        "mlp = MLPRegressor(hidden_layer_sizes=(100,), max_iter=500, random_state=42)\n",
        "mlp.fit(X_train, y_train)\n",
        "\n",
        "# Making predictions and categorizing into 3 classes\n",
        "y_pred_continuous = mlp.predict(X_test)\n",
        "\n",
        "# **Fix:** Ensure bins are monotonically increasing\n",
        "bins = [y_pred_continuous.min(), low_threshold, high_threshold, y_pred_continuous.max()]\n",
        "# Sort the bins to ensure they are monotonically increasing\n",
        "bins.sort()\n",
        "\n",
        "y_pred = pd.cut(y_pred_continuous,\n",
        "                bins=bins,  # Use the sorted bins\n",
        "                labels=[0, 1, 2],\n",
        "                include_lowest=True,\n",
        "                duplicates='drop') # added to handle potential duplicate edges\n",
        "\n",
        "# Creating the confusion matrix\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "# Displaying the confusion matrix\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=cm,\n",
        "                              display_labels=['Low', 'Medium', 'High'])  # Set labels for the 3 categories\n",
        "disp.plot(cmap='Greys')\n",
        "plt.title(\"Confusion Matrix for MLP Model (3x3)\")\n",
        "plt.show()\n",
        "\n",
        "print(\"Confusion Matrix:\\n\", cm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 541
        },
        "id": "qSBMxbwmOttg",
        "outputId": "156d95d0-e040-4824-ab69-e1ecf0d14526"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion Matrix:\n",
            " [[198   0   0]\n",
            " [180   0   0]\n",
            " [177   0   0]]\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
